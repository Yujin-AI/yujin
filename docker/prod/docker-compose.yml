services:
  server:
    env_file:
      - ../../.env.production
    container_name: server
    build:
      context: ../../
      dockerfile: docker/prod/Dockerfile
    environment:
      - NODE_ENV=production
      - PORT=3000
      - HOST=0.0.0.0
    command: 'node bin/server.js'
    volumes:
      - server_data:/app
    ports:
      - '3000:3000'
    restart: on-failure
    networks:
      - app-network
    depends_on:
      - crawler
      - postgres
      - redis
      - typesense

  crawler:
    container_name: crawler
    env_file:
      - ../../crawler/.env
    build:
      context: ../../crawler
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
      - PORT=5656
    ports:
      - '5000:5656'
    volumes:
      - crawler_data:/crawler

  job_spider:
    env_file:
      - ../../.env.production
    container_name: job_spider
    build:
      context: ../../
      dockerfile: docker/prod/Dockerfile
    environment:
      - NODE_ENV=production
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - TYPESENSE_HOST=typesense
      - TYPESENSE_PORT=8108
    command: pnpm job:spider
    volumes:
      - job_spider_data:/app
    depends_on:
      - server

  # job_shopify:
  #   env_file:
  #     - ../../.env.production
  #   container_name: job_shopify
  #   build:
  #     context: ../../
  #     dockerfile: docker/prod/Dockerfile
  #   environment:
  #     - NODE_ENV=production
  #   command: pnpm job:shopify
  #   volumes:
  #     - job_shopify_data:/app
  #   depends_on:
  #     - server
  #     - postgres
  #     - redis

  # job_rest:
  #   env_file:
  #     - ../../.env.production
  #   container_name: job_rest
  #   build:
  #     context: ../../
  #     dockerfile: docker/prod/Dockerfile
  #   environment:
  #     - NODE_ENV=production
  #   command: pnpm job:rest
  #   volumes:
  #     - job_rest_data:/app
  #   depends_on:
  #     - server
  #     - postgres
  #     - redis

  postgres:
    container_name: postgres
    image: postgres
    environment:
      POSTGRES_USER: yujin
      POSTGRES_PASSWORD: yujin
      POSTGRES_DB: yujin-prod
      PGDATA: /var/lib/postgresql/data
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - '4321:5432'
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: [ 'CMD-SHELL', 'pg_isready -U yujin' ]
      interval: 30s
      timeout: 10s
      retries: 5

  redis:
    container_name: redis
    image: redis:latest
    ports:
      - '6543:6379'
    volumes:
      - redis_data:/data
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: [ 'CMD', 'redis-cli', 'ping' ]
      interval: 30s
      timeout: 10s
      retries: 5

  typesense:
    container_name: typesense
    image: typesense/typesense:26.0
    restart: on-failure
    ports:
      - '8100:8108'
    volumes:
      - typesense_data:/data
    command: '--data-dir /data --api-key=uakfP2inGOv47nDweUmkFVQnKQuyqr7h --enable-cors'
    networks:
      - app-network
    healthcheck:
      test: [ 'CMD-SHELL', 'curl --fail http://localhost:8108/health || exit 1' ]
      interval: 30s
      timeout: 10s
      retries: 5

  resque-web:
    image: appwrite/resque-web
    container_name: resque-web-prod
    ports:
      - '4567:5678'
    environment:
      - RESQUE_WEB_HOST=redis
      - RESQUE_WEB_PORT=6379
    depends_on:
      - redis
    networks:
      - app-network
    restart: unless-stopped

volumes:
  server_data:
  job_spider_data:
  job_shopify_data:
  job_rest_data:
  postgres_data:
  redis_data:
  typesense_data:
  crawler_data:

networks:
  app-network:
    driver: bridge
